name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)
 
trigger:
  - main
 
pr: none
 
parameters:
 
  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
    - Plan
    - Apply
    - Destroy
 
variables:
  - name: backendServiceArm
    value: 'AzureDevOps_sp_connection' #Service connection
  - name: backendAzureRmResourceGroupName
    value: 'puru-test-rg-01'  
  - name: backendAzureRmStorageAccountName
    value: 'purutfstate'  # Storage account name
  - name: backendAzureRmContainerName
    value: 'dev-tfstate'
  - name: backendAzureRmKey
    value: 'dev.terraform.tfstate'
  - name: terraform_version
    value: '1.0.10'
  - name: action
    value: ${{ parameters.Action }}
  - name: adminUsername
    value: admin
 
stages :  
  - stage: terraform_plan_apply
    condition: ne('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: terraform_apply
        steps:
          - task: TerraformInstaller@0
            displayName: 'install'
            inputs:
              terraformVersion: '${{ variables.terraform_version }}'
          - task: TerraformTaskV2@2
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '${{ variables.backendServiceArm }}' #
              backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
              backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
              backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
              backendAzureRmKey: '${{ variables.backendAzureRmKey }}'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Azure/'
          - task: TerraformTaskV2@2
            displayName: 'plan'
            condition: and(succeeded(), eq(variables['Action'], 'Plan'))
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: '${{ variables.backendServiceArm }}'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Azure/'
            env:
              TF_VAR_admin_profile: '{
                "admin_username": "$(adminUsername)",
                "admin_password": "$(adminPassword)"
              }'
          - task: TerraformTaskV2@2
            displayName: 'apply'
            condition: and(succeeded(), eq(variables['Action'], 'Apply'))
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: '${{ variables.backendServiceArm }}'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Azure/'
            env:
              TF_VAR_admin_profile: '{
                "admin_username": "$(adminUsername)",
                "admin_password": "$(adminPassword)"
              }'
 
  - stage: terraform_destroy
    condition: contains('${{ parameters.Action }}', 'Destroy')
    environment: approval-env
    jobs:
      - job: terraform_destroy
        steps:
          - task: TerraformTaskV2@2
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '${{ variables.backendServiceArm }}'
              backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
              backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
              backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
              backendAzureRmKey: '${{ variables.backendAzureRmKey }}'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Azure/'
            
          - task: TerraformTaskV2@2
            displayName: 'destroy'
            condition: and(succeeded(), eq(variables['action'], 'Destroy'))
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              environmentServiceNameAzureRM: '${{ variables.backendServiceArm }}'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Azure/'