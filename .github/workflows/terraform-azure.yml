# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
name: 'Build Azure Infra'

on:
  push: 
    branches: 
      - main
    paths: 
      - '**.tf'
      - '.github/workflows/*'
  pull_request: 
    branches: 
      - main
  # workflow_dispatch: 
  #   inputs:
  #     environment: 
  #       description: 'Choose the deployment environment'
  #       type: choice
  #       required: true
  #       default: 'dev'
  #       options:
  #         - dev
  #         - production 
  #     ResourceName:
  #       description: 'What resource you are trying to create'
  #       type: string
  #       required: true
  #       default: 'aks'
run-name: 'Azure Infra - Run ID: ${{ github.run_id }} - by @${{ github.actor }}'
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  what_resource: 'aks'  #${{ inputs.ResourceName }}
  #These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_USE_OIDC: true
  envName: "dev"
jobs:
  terraform-validate-plan:
    name: 'Terraform Validate and Plan'
    runs-on: ubuntu-latest
    environment: dev #${{ inputs.environment }}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}/Azure/terraform-code
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -upgrade
      #working-directory: ${{ github.workspace }}/Azure/terraform-code

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true
    
    - name: Terraform Validate
      run: terraform validate -no-color
    - name: List files
      run: ls -lart
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -var-file="${{ env.envName }}.tfvars" -detailed-exitcode -no-color -out ${{ env.what_resource }}-plan-${{ github.run_number }} || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
      env:
        TF_VAR_clientId: "${{ secrets.AZURE_CLIENT_ID }}"
        TF_VAR_clientSecret: "${{ secrets.AZURE_CLIENT_SECRET }}"
        TF_VAR_tenant_id: "${{ secrets.AZURE_TENANT_ID }}"
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.what_resource }}-plan-${{ github.run_number }}
        path: ${{ github.workspace }}/*
        if-no-files-found: error
        include-hidden-files: true
    
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color ${{ env.what_resource }}-plan-${{ github.run_number }})
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
    - name: List files
      run: |
        pwd
        ls -lart
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false ${{ env.what_resource }}-plan-${{ github.run_number }}

